name: Deploy Docker Containers

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Paso 1: Configurar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v3

    # Paso 2: Configurar archivo VPN y conectarse
    - name: Configure and Connect to VPN
      run: |
        echo "${{ secrets.VPN_CONFIG }}" > vpn-config.ovpn
        echo "${{ secrets.VPN_CREDENTIALS }}" > vpn-credentials.txt
        chmod 600 vpn-credentials.txt
        sudo apt-get update && sudo apt-get install -y openvpn
        sudo openvpn --config vpn-config.ovpn --auth-user-pass vpn-credentials.txt --daemon
      env:
        VPN_CONFIG: ${{ secrets.VPN_CONFIG }}
        VPN_CREDENTIALS: ${{ secrets.VPN_CREDENTIALS }}

    # Paso 3: Verificar conexión VPN
    - name: Verify VPN Connection
      run: |
        curl ifconfig.me
        echo "VPN connected successfully!"

    # Paso 4: Establecer conexión SSH
    - name: Connect via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        password: ${{ secrets.REMOTE_PASSWORD }}
        port: 22
        script: |
          echo "SSH connection established"

    # Paso 5: Desplegar contenedores Docker
    - name: Deploy Docker Containers
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        password: ${{ secrets.REMOTE_PASSWORD }}
        port: 22
        script: |
          docker-compose down
          docker-compose pull
          docker-compose up -d

    # Paso 6: Desconectar de la VPN
    - name: Disconnect VPN
      if: always() # Asegura que este paso se ejecute incluso si hay errores previos
      run: |
        sudo pkill openvpn
